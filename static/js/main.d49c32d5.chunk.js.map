{"version":3,"sources":["DisplayImage.js","App.js","serviceWorker.js","index.js"],"names":["DisplayImage","props","className","src","url","alt","alt_description","href","portfolio","user","siteUrl","App","getImages","queryTerm","randomPage","axios","method","dataResponse","params","client_id","query","page","per_page","orientation","format","then","res","smileImages","data","results","setState","images","Math","floor","random","handleChange","event","randomNumber","dropdownItem","target","value","state","coverImage","prevProps","prevState","this","forhtml","id","onChange","length","key","urls","regular","name","portfolio_url","map","displayImage","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d49c32d5.chunk.js","sourcesContent":["import React from 'react';\n\nconst DisplayImage = (props) => {\n\n    return (\n\n        <div className=\"flexDiv\">\n            <img src={props.url} alt={props.alt_description}/>\n            <p>Photo by <a href={props.portfolio}>{props.user}</a> on <a href={props.siteUrl}>Unsplash</a></p>\n        </div>\n\n    );\n}\n\nexport default DisplayImage;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport DisplayImage from './DisplayImage.js'\n\nimport './App.css';\n\n\n// My lovely state\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      images: [],\n      dropdownItem: '',\n      randomNumber: 1,\n      coverImage: null\n    }\n  }\n\n  // API call for landing page image\n  componentDidMount() {\n    const apiKey = \"w_BCXG1arn8Umvl_4Qgbdp9T16jilc-Q7NGOHnSUp70\";\n    axios({\n      method: 'GET',\n      url: 'https://api.unsplash.com/photos/random',\n      dataResponse: 'json',\n      params: {\n        client_id: apiKey,\n        query: 'nature',\n        orientation: 'portrait',\n        format: 'json'\n      }\n    }).then((res) => {\n      const coverImage = res.data;\n      this.setState({\n        coverImage: coverImage\n      })\n    })\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // If dropdown selection changes, select a random page from query to display\n    if (this.state.dropdownItem !== prevState.dropdownItem) {\n      this.getImages(this.state.dropdownItem, this.state.randomNumber);\n    }\n  }\n\n  // API call with user input in query param\n  getImages = (queryTerm, randomPage) => {\n    const apiKey = \"w_BCXG1arn8Umvl_4Qgbdp9T16jilc-Q7NGOHnSUp70\";\n    axios({\n      method: 'GET',\n      url: 'https://api.unsplash.com/search/photos',\n      dataResponse: 'json',\n      params: {\n        client_id: apiKey,\n        query: queryTerm,\n        page: randomPage,\n        per_page: 12,\n        orientation: 'squarish',\n        format: 'json'\n      }\n    }).then((res) => {\n      const smileImages = res.data.results;\n      this.setState({\n        images: smileImages,\n      })\n    })\n  } \n  // Randomizer\n  randomPage = () => {\n    return Math.floor(Math.random() * 5);\n  }\n  \n  // Handle user input onChange\n  handleChange = (event) => {\n    const randomNumber = this.randomPage();\n    this.setState({\n      dropdownItem: event.target.value,\n      randomNumber: randomNumber\n    });\n    }\n\n  render() {\n  return (\n      <div className=\"App\">\n        \n        <div className=\"wrapper\">\n          <h1>Take a break and smile!</h1>\n\n          {/* Dropdown menu */}\n          <form className=\"flexForm\">\n            <label forhtml=\"smile\">Select what makes you smile:</label>\n            <select className=\"smile\" id=\"smile\" onChange={this.handleChange} value={this.state.dropdownItem}>\n              <option className=\"select\" value=\"\">Please select an option</option>\n              <option value=\"puppies\">Puppies</option>\n              <option value=\"kittens\">Kittens</option>\n              <option value=\"flowers\">Flowers</option>\n              <option value=\"sunset\">Sunset</option>\n              <option value=\"ocean\">Ocean</option>\n            </select>\n          </form>\n  \n          <div className=\"results\">\n            {this.state.images.length < 1 ? (\n              <div className=\"discover\">\n                {this.state.coverImage ?\n                <DisplayImage \n                  key={this.state.coverImage.id}\n                  url={this.state.coverImage.urls.regular}\n                  alt_description={this.state.coverImage.alt_description}\n                  user={this.state.coverImage.user.name}\n                  portfolio={this.state.coverImage.user.portfolio_url}\n                  siteUrl={'https://unsplash.com/'}\n                /> : null }\n                </div>  \n            ):   \n            this.state.images.map((displayImage) => {\n            return (\n              <DisplayImage \n                key={displayImage.id}\n                url={displayImage.urls.regular}\n                alt_description={displayImage.alt_description}\n                user={displayImage.user.name}\n                portfolio={displayImage.user.portfolio_url}\n                siteUrl={'https://unsplash.com/'}\n              />\n              );\n            })}\n            </div>\n        </div>\n\n        <footer>\n        <p>Copyright Â© 2020 Karina Vertti | <a href=\"https://junocollege.com/\" target=\"blank\">Created at Juno\n                College</a></p>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}