{"version":3,"sources":["DisplayImage.js","App.js","serviceWorker.js","index.js"],"names":["DisplayImage","props","className","src","url","alt","alt_description","href","portfolio","user","siteUrl","App","getImages","queryTerm","randomPage","axios","method","dataResponse","params","client_id","query","page","per_page","orientation","format","then","res","console","log","smileImages","data","results","setState","images","Math","floor","random","handleChange","event","randomNumber","dropdownItem","target","value","state","prevProps","prevState","this","class","forhtml","name","id","onChange","map","displayImage","key","urls","regular","portfolio_url","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sSAeeA,EAbM,SAACC,GAElB,OAEY,yBAAKC,UAAU,WACX,yBAAKC,IAAKF,EAAMG,IAAKC,IAAKJ,EAAMK,kBAEhC,uCAAY,uBAAGC,KAAMN,EAAMO,WAAYP,EAAMQ,MAA7C,OAA0D,uBAAGF,KAAMN,EAAMS,SAAf,eCwH/DC,G,wDA1Gb,aAAe,IAAD,8BACZ,gBAeFC,UAAY,SAACC,EAAWC,GAEtBC,IAAM,CACJC,OAAQ,MACRZ,IAAK,yCACLa,aAAc,OAEdC,OAAQ,CACNC,UAPW,8CAQXC,MAAOP,EACPQ,KAAMP,EACNQ,SAAU,GACVC,YAAa,WACbC,OAAQ,UAETC,MAAK,SAACC,GACPC,QAAQC,IAAIF,GAEZ,IAAMG,EAAcH,EAAII,KAAKC,QAC7BJ,QAAQC,IAAIF,EAAII,KAAKC,SACrB,EAAKC,SAAS,CACZC,OAAQJ,QArCA,EA2Cdf,WAAa,WACX,OAAOoB,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GA5C3B,EAgDdC,aAAe,SAACC,GAEd,IAAMC,EAAe,EAAKzB,aAC1B,EAAKkB,SAAS,CACZQ,aAAcF,EAAMG,OAAOC,MAC3BH,aAAcA,KAlDhB,EAAKI,MAAQ,CACXV,OAAQ,GACRO,aAAc,GACdD,aAAc,GANJ,E,+DAUKK,EAAWC,GACxBC,KAAKH,MAAMH,eAAiBK,EAAUL,cACxCM,KAAKlC,UAAUkC,KAAKH,MAAMH,aAAcM,KAAKH,MAAMJ,gB,+BAgDvD,OADEZ,QAAQC,IAAIkB,KAAKhC,cAEf,yBAAKZ,UAAU,OAEb,yBAAK6C,MAAM,WACT,uDAIA,8BACE,2BAAOC,QAAQ,SAAf,gCACA,4BAAQC,KAAK,QAAQC,GAAG,QAAQC,SAAUL,KAAKT,aAAcK,MAAOI,KAAKH,MAAMH,cAC7E,4BAAQtC,UAAU,SAASwC,MAAM,IAAjC,2BACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,WAIJ,yBAAKxC,UAAU,WACd4C,KAAKH,MAAMV,OAAOmB,KAAI,SAACC,GACxB,OACI,kBAAC,EAAD,CACAC,IAAKD,EAAaH,GAClB9C,IAAKiD,EAAaE,KAAKC,QACvBlD,gBAAiB+C,EAAa/C,gBAC9BG,KAAM4C,EAAa5C,KAAKwC,KACxBzC,UAAW6C,EAAa5C,KAAKgD,cAC7B/C,QAAS,+BAOf,gCACA,kEAAoC,uBAAGH,KAAK,2BAA2BkC,OAAO,SAA1C,kC,GAlG1BiB,cCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.a806f4cd.chunk.js","sourcesContent":["import React from 'react';\n\nconst DisplayImage = (props) => {\n\n    return (\n\n                <div className=\"flexDiv\">\n                    <img src={props.url} alt={props.alt_description}/>\n                    {/* <p>Photo by: {props.user}</p> */}\n                    <p>Photo by <a href={props.portfolio}>{props.user}</a> on <a href={props.siteUrl}>Unsplash</a></p>\n                </div>\n\n    );\n}\n\nexport default DisplayImage;\n\n// Photo by <a href=\"https://unsplash.com/@anniespratt?utm_source=your_app_name&utm_medium=referral\">Annie Spratt</a> on <a href=\"https://unsplash.com/?utm_source=your_app_name&utm_medium=referral\">Unsplash</a>","import React, { Component } from 'react';\nimport axios from 'axios';\nimport DisplayImage from './DisplayImage.js'\n// import DropDown from './DropDown.js';\n\nimport './App.css';\n\n\n// Pseudo code:\n// User image class from dropdown\n// Capture user input onChange\n// Make API call with user input in query param\n// Get results back\n// Map over results and display\n// Add a component to display the images\n// User input and images go into state\n\n// Stretch goals:\n// Make an album from user's favourite photos using Firebase\n\n\n// Display artwork on the page\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      images: [],\n      dropdownItem: '',\n      randomNumber: 1\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.dropdownItem !== prevState.dropdownItem) {\n      this.getImages(this.state.dropdownItem, this.state.randomNumber);\n    }\n  }\n\n  getImages = (queryTerm, randomPage) => {\n    const apiKey = \"w_BCXG1arn8Umvl_4Qgbdp9T16jilc-Q7NGOHnSUp70\";\n    axios({\n      method: 'GET',\n      url: 'https://api.unsplash.com/search/photos',\n      dataResponse: 'json',\n      // stuff that goes after the question mark (query parameters)\n      params: {\n        client_id: apiKey,\n        query: queryTerm,\n        page: randomPage,\n        per_page: 12,\n        orientation: 'squarish',\n        format: 'json'\n      }\n    }).then((res) => {\n      console.log(res);\n      // Code to run after data comes back from API\n      const smileImages = res.data.results;\n      console.log(res.data.results);\n      this.setState({\n        images: smileImages,\n      })\n    })\n\n  } \n\n  randomPage = () => {\n    return Math.floor(Math.random() * 5) + 1 \n  }\n  \n\n  handleChange = (event) => {\n    // user input data\n    const randomNumber = this.randomPage();\n    this.setState({\n      dropdownItem: event.target.value,\n      randomNumber: randomNumber\n    });\n    \n    }\n\n  render() {\n    console.log(this.randomPage());\n  return (\n      <div className=\"App\">\n        \n        <div class=\"wrapper\">\n          <h1>Take a break and smile!</h1>\n          \n          {/* <DropDown/> */}\n  \n          <form>\n            <label forhtml=\"smile\">Select what makes you smile:</label>\n            <select name=\"smile\" id=\"smile\" onChange={this.handleChange} value={this.state.dropdownItem}>\n              <option className=\"select\" value=\"\">Please select an option</option>\n              <option value=\"puppies\">Puppies</option>\n              <option value=\"kittens\">Kittens</option>\n              <option value=\"flowers\">Flowers</option>\n              <option value=\"sunset\">Sunset</option>\n              <option value=\"ocean\">Ocean</option>\n          </select>\n          </form>\n  \n          <div className=\"results\">\n          {this.state.images.map((displayImage) => {\n          return (\n              <DisplayImage \n              key={displayImage.id}\n              url={displayImage.urls.regular}\n              alt_description={displayImage.alt_description}\n              user={displayImage.user.name}\n              portfolio={displayImage.user.portfolio_url}\n              siteUrl={'https://unsplash.com/'}\n              />\n              );\n            })}\n            </div>\n        </div>\n\n        <footer>\n        <p>Copyright Â© 2020 Karina Vertti | <a href=\"https://junocollege.com/\" target=\"blank\">Created at Juno\n                College</a></p>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}